from binascii import hexlify, unhexlify
import pefile
import regex as re
import yara
import string
import argparse
import logging
import traceback
import os
from struct import *

def configure_logger(log_level):
    log_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mars_decrypt.log')
    log_levels = {0: logging.ERROR, 1: logging.WARNING, 2: logging.INFO, 3: logging.DEBUG}
    log_level = min(max(log_level, 0), 3) #clamp to 0-3 inclusive
    logging.basicConfig(level=log_levels[log_level], 
                        format='%(asctime)s - %(name)s - %(levelname)-8s %(message)s',
                        handlers=[
                            logging.FileHandler(log_file, 'a'),
                            logging.StreamHandler()
                        ])

class Decryptor:
    
    def __init__(self, input_file, output_file=None):
        self.logger = logging.getLogger('Mars Stealer String Decryptor Logger')
        self.input_file = input_file
        self.output_file = output_file
        self.regex = re.compile(rb'(\x6A(?P<len>.))(\x68(?P<ciphertext>....))(\x68(?P<key>....))', re.DOTALL)
        self.output_strings = []
        with open(self.input_file, 'rb') as fp:
            self.data = fp.read()

    def extract_key_ciphertext(self, key_addr, ciphertext_addr, ciphertext_length):
        """
        Extract key and ciphertext and return
        """
        key_addr = int.from_bytes(key_addr, "big")
        ciphertext_addr = int.from_bytes(ciphertext_addr, "big")
        ciphertext_length = int.from_bytes(ciphertext_length, "big")

        # PE File
        pe = pefile.PE(self.input_file, fast_load=False)
        # Extract Key Addr
        key_ptr = pe.get_offset_from_rva(key_addr - pe.OPTIONAL_HEADER.ImageBase)
        self.logger.debug(f'Found potential key ptr at {hex(key_ptr)}')
        # Extract Ciphertext Addr
        ct_ptr = pe.get_offset_from_rva(ciphertext_addr - pe.OPTIONAL_HEADER.ImageBase)
        self.logger.debug(f'Found potential ciphertext ptr at {hex(ct_ptr)}')  

        # Extract key and ciphertext from ptr
        with open(self.input_file, 'rb') as fp:
            fp.seek(key_ptr, 0)
            key = fp.read(ciphertext_length)
            self.logger.debug(f'Found key: {hexlify(key)}')
            fp.seek(ct_ptr, 0)
            ciphertext = fp.read(ciphertext_length)
            self.logger.debug(f'Found ciphertext: {hexlify(ciphertext)}')
        return key, ciphertext

    def extract_strings(self):
        """
        Extract ciphertext (hashes) and keys and perform decryption of strings in Mars Stealer
        """

        matches = list(self.regex.finditer(self.data))
        #print(matches)
        for match in matches:
            if not match.group('key'):
                self.logger.warning(f'No key: {match.groupdict()}')
                continue
            match_data = self.data[match.start():match.end()]
            # Extract Ciphertext Length
            ciphertext_length = bytes(reversed(match.group('len')))
            # Extract Key Addr
            key_addr = bytes(reversed(match.group('key')))
            # Extract Ciphertext Addr
            ciphertext_addr = bytes(reversed(match.group('ciphertext')))
            key, ciphertext = self.extract_key_ciphertext(key_addr, ciphertext_addr, ciphertext_length)
            
            # Xor Decrypt
            buf = bytearray(ciphertext)
            key = bytearray(key)
            for i in range(len(buf)):
                buf[i] ^= key[i%len(key)]
            try:
                print(buf.decode('ascii'))
                self.output_strings.append(buf.decode('ascii'))
            except:
                print(buf)
                self.output_strings.append(buf)
            continue

    def write_output(self):
        #Write output to a given file
        try:
            with open(self.output_file, 'w') as fp:
                for x in self.output_strings:
                    fp.write(str(x))
                    fp.write('\n')
        except Exception as e:
            self.logger.critical(traceback.format_exc())
            

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Mars Stealer String Decryptor')
    parser.add_argument('-f', '--file', action='store', dest='file',
                        required=True, help='Path of file to decrypt strings')
    parser.add_argument('-o', '--outfile', action='store', dest='outfile',
                        required=False, help='Path to write unpacked strings')
    parser.add_argument('-v', '--verbose', action='count', default=0, 
        help='Increase verbosity. Can specify multiple times for more verbose output')
    args = parser.parse_args()
    configure_logger(args.verbose)
    decryptor = Decryptor(args.file, args.outfile)
    try:
        decryptor.extract_strings()
        if args.outfile:
            decryptor.write_output()
    except Exception as e:
        print(f'Exception processing {args.file}:')
        print(traceback.format_exc())
    
