from binascii import hexlify, unhexlify
import pefile
import regex as re
import argparse
import logging
import traceback
import os
from arc4 import ARC4

def configure_logger(log_level):
    log_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'icedid_config_extractor.log')
    log_levels = {0: logging.ERROR, 1: logging.WARNING, 2: logging.INFO, 3: logging.DEBUG}
    log_level = min(max(log_level, 0), 3) #clamp to 0-3 inclusive
    logging.basicConfig(level=log_levels[log_level], 
                        format='%(asctime)s - %(name)s - %(levelname)-8s %(message)s',
                        handlers=[
                            logging.FileHandler(log_file, 'a'),
                            logging.StreamHandler()
                        ])

class Extractor:
    
    def __init__(self, input_file, output_file=None):
        self.logger = logging.getLogger('IcedID Config Extractor Logger')
        self.input_file = input_file
        self.output_file = output_file
        self.output_strings = []
        with open(self.input_file, 'rb') as fp:
            self.data = fp.read()
        self.pe = pefile.PE(self.input_file, fast_load=False)

    def xor_decrypt(self, key, ciphertext):
        """
        XOR decrypt
        """
        for i in range(len(ciphertext)):
            ciphertext[i] ^= key[i%len(key)]
        return ciphertext

    def extract_config(self):
        """
        Extract key and config and decrypt
        """

        # Search for the section with the key/ciphertext
        for section in self.pe.sections:
            if b'.d\x00' in section.Name:
                data = section.get_data()
        key = bytearray(data[:64])
        ciphertext = bytearray(data[64:])
        
        # Decrypt the config
        decrypted = self.xor_decrypt(key, ciphertext)
        campaign_id = int.from_bytes(decrypted[:4], "little")
        c2 = decrypted[4:].split(b'\x00')[0].decode('ascii')

        # Print 'em out
        print(f'Campaign ID: {campaign_id}')
        print(f'C2 Address: {c2}') 
 

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='IcedID Config Extractor')
    parser.add_argument('-v', '--verbose', action='count', default=0, 
        help='Increase verbosity. Can specify multiple times for more verbose output')
    parser.add_argument('files', nargs='+') 
    args = parser.parse_args()
    configure_logger(args.verbose)
    for file in args.files:
        extractor = Extractor(file)
        try:
            extractor.extract_config()
        except Exception as e:
            print(f'Exception processing {file}:')
            print(traceback.format_exc())
    
