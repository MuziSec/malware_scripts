from binascii import hexlify, unhexlify
import pefile
import regex as re
import yara
import string
import argparse
import logging
import traceback
import os

def configure_logger(log_level):
    log_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'unpacker.log')
    log_levels = {0: logging.ERROR, 1: logging.WARNING, 2: logging.INFO, 3: logging.DEBUG}
    log_level = min(max(log_level, 0), 3) #clamp to 0-3 inclusive
    logging.basicConfig(level=log_levels[log_level], 
                        format='%(asctime)s - %(name)s - %(levelname)-8s %(message)s',
                        handlers=[
                            logging.FileHandler(log_file, 'a'),
                            logging.StreamHandler()
                        ])

class Decryptor:
    
    def __init__(self, input_file, output_file=None):
        self.logger = logging.getLogger('BazarLoader String Decryptor Logger')
        self.input_file = input_file
        self.output_file = output_file
        self.mov_regex1 = re.compile(rb'(\xBA(?P<key>....))(\xC7(\x44\x24|\x45)(?P<offset>.)(?P<str>....)){3,}', re.DOTALL)
        self.mov_regex2= re.compile(rb'(\xC7(\x44\x24|\x45)(?P<offset>.)(?P<str>....)){3,}.{,32}?(\x8B\x44..\x35(?P<key>....))', re.DOTALL)
        self.output_strings = []
        with open(self.input_file, 'rb') as fp:
            self.data = fp.read()

    def extract_strings(self):
        """
        Extract ciphertext (hashes) and keys and perform decryption of strings in BazarLoader
        """

        matches = list(self.mov_regex1.finditer(self.data)) + list(self.mov_regex2.finditer(self.data))
        for match in matches:
            if not match.group('key'):
                self.logger.warning(f'No key: {match.groupdict()}')
                continue

            match_data = self.data[match.start():match.end()]
            key = bytearray(match.group('key'))
            
            self.logger.debug(f'Found match at 0x{match.start():08X} Key: {hexlify(key)}, string_fragments: {match.captures("str")}, offsets: {match.captures("offset")}, data: {hexlify(match_data)}')
            buf = bytearray(b''.join(match.captures("str")))

            for i in range(len(buf)):
                buf[i] ^= key[i%len(key)]
            try:
                print(buf.decode('ascii'))
                self.output_strings.append(buf.decode('ascii'))
            except:
                print(buf)
                self.output_strings.append(buf)
            continue

    def write_output(self):
        """
        Write output to a given file
        """
        try:
            with open(self.output_file, 'w') as fp:
                for x in self.output_strings:
                    fp.write(str(x))
                    fp.write('\n')
        except Exception as e:
            self.logger.critical(traceback.format_exc())

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='BazarLoader String Decryptor')
    parser.add_argument('-f', '--file', action='store', dest='file',
                        required=True, help='Path of file to unpack')
    parser.add_argument('-o', '--outfile', action='store', dest='outfile',
                        required=False, help='Path to write unpacked strings')
    parser.add_argument('-v', '--verbose', action='count', default=0, 
        help='Increase verbosity. Can specify multiple times for more verbose output')
    args = parser.parse_args()
    configure_logger(args.verbose)
    decryptor = Decryptor(args.file, args.outfile)
    try:
        decryptor.extract_strings()
        if args.outfile:
            decryptor.write_output()
    except Exception as e:
        print(f'Exception processing {args.file}:')
        print(traceback.format_exc())
    
